name: MacOS.

on: [push]

jobs:

  check:
    if: "!(contains(github.event.head_commit.message, '[skip ci]'))"
    name: Parse parameters
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.parse.outputs.build }}
      ref: ${{ steps.parse.outputs.ref }}
      update: ${{ steps.parse.outputs.update }}
      packer: ${{ steps.parse.outputs.packer }}
      telegram: ${{ steps.parse.outputs.telegram }}
      description: ${{ steps.parse.outputs.description }}
      cache: ${{ steps.parse.outputs.cache }}

    steps:
      - name: Clone scripts.
        uses: actions/checkout@v2
      - name: Parse commit description
        id: parse
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const path = require('path');
            const currentBuild = "mac";
            const scriptPath = path.resolve('./scripts/option_parser.js');
            require(scriptPath)({github, context, currentBuild});

  build:
    name: Build on latest macOS
    needs: check
    if: needs.check.outputs.build == 'true'
    runs-on: macos-latest

    env:
      ONLY_CACHE: "false"
      REPO_ORG: "kotatogram"
      REPO_NAME: "kotatogram-desktop"

    steps:
      - name: Clone.
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO_ORG }}/${{ env.REPO_NAME }}
          submodules: recursive
          path: ${{ env.REPO_NAME }}
          ref: ${{ needs.check.outputs.ref }}

      - name: Clone scripts.
        uses: actions/checkout@v2
        with:
          path: buildscripts

      - name: Parse current version.
        shell: bash
        run: ./buildscripts/scripts/parse_version.sh

      - name: First set up.
        run: |
          sudo chown -R `whoami`:admin /usr/local/share
          brew install automake fdk-aac lame libass libtool libvorbis libvpx \
          ninja opus sdl shtool texi2html theora x264 xvid yasm pkg-config

          # Disable spotlight.
          sudo mdutil -a -i off

          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Setting up updater keys.
        if: >
          needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        env:
          PACKER_PRIVATE_KEY: ${{ secrets.PACKER_PRIVATE_KEY }}
          PACKER_PRIVATE_BETA_KEY: ${{ secrets.PACKER_PRIVATE_BETA_KEY }}
        run: python3 buildscripts/scripts/updater_keys.py

      - name: ThirdParty cache.
        id: cache-third-party
        uses: actions/cache@v2
        with:
          path: ThirdParty
          key: ${{ runner.OS }}-third-party

      - name: Libraries cache.
        id: cache-libs
        uses: actions/cache@v2
        with:
          path: Libraries
          key: ${{ runner.OS }}-libs

      - name: Libraries.
        run: |
          ./$REPO_NAME/Telegram/build/prepare/mac.sh silent

      - name: Kotatogram Desktop build.
        if: env.ONLY_CACHE == 'false'
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
        run: |
          cd $REPO_NAME/Telegram

          UPDDEFINE="OFF"
          ${{ needs.check.outputs.update }} || UPDDEFINE="ON"

          PACKERDEFINE="ON"
          ${{ needs.check.outputs.packer }} || PACKERDEFINE="OFF"

          ./configure.sh \
          -DCMAKE_EXE_LINKER_FLAGS="-s" \
          -DTDESKTOP_API_ID=${API_ID} \
          -DTDESKTOP_API_HASH=${API_HASH} \
          -DDESKTOP_APP_USE_PACKAGED=OFF \
          -DDESKTOP_APP_DISABLE_AUTOUPDATE=${UPDDEFINE} \
          -DKTGDESKTOP_ENABLE_PACKER=${PACKERDEFINE}

          cmake --build ../out --config Release --parallel

          cd ../out/Release
          codesign --remove-signature Kotatogram.app

          tag_name=${{ needs.check.outputs.display_version }}
          artifact_name=${{ env.VERSION_STR }}-macos.dmg
          echo "ARTIFACT_NAME=$artifact_name" >> $GITHUB_ENV

          mkdir dmgsrc
          mv Kotatogram.app dmgsrc
          hdiutil create -volname Kotatogram -srcfolder dmgsrc -ov -format UDZO $artifact_name

      - name: Upload artifact.
        if: env.ONLY_CACHE == 'false'
        uses: actions/upload-artifact@v2
        with:
          path: ./${{ env.REPO_NAME }}/out/Release/${{ env.ARTIFACT_NAME }}
          name: Binary

      - name: Install dependencies for Telegram uploader.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
        run: |
          python3 -m pip install telethon cryptg

      - name: Upload binary to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python3 buildscripts/scripts/uploader.py
          "@ktgbuilds"
          "${{ env.REPO_NAME }}/out/Release/${{ env.ARTIFACT_NAME }}"
          "#macOS"

      - name: Package update.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        run: |
          cd $REPO_NAME

          ./out/Release/Packer -version ${{ env.VERSION_NUM }}${{ env.PACKER_BETA }} \
          -path out/Release/dmgsrc/Kotatogram.app \
          -target mac

          tar -caf tmacupd${{ env.VERSION_NUM }}.tar.xz tmacupd${{ env.VERSION_NUM }}
          echo ""UPDATE_FILE=tmacupd${{ env.VERSION_NUM }}"" >> $GITHUB_ENV

      - name: Upload update artifact.
        uses: actions/upload-artifact@v2
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        with:
          path: ./${{ env.REPO_NAME }}/${{ env.UPDATE_FILE }}
          name: Update file

      - name: Upload update to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
          && needs.check.outputs.telegram == 'true'
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python3 buildscripts/scripts/uploader.py
          "@ktghbcfiles"
          "${{ env.REPO_NAME }}/${{ env.UPDATE_FILE }}"
          "${{ needs.check.outputs.description }}"
