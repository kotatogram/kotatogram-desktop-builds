name: Windows.

on: [push]

jobs:

  check:
    if: "!(contains(github.event.head_commit.message, '[skip ci]'))"
    name: Parse parameters
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.parse.outputs.build }}
      ref: ${{ steps.parse.outputs.ref }}
      update: ${{ steps.parse.outputs.update }}
      packer: ${{ steps.parse.outputs.packer }}
      telegram: ${{ steps.parse.outputs.telegram }}
      installer: ${{ steps.parse.outputs.installer }}
      description: ${{ steps.parse.outputs.description }}
      cache: ${{ steps.parse.outputs.cache }}

    steps:
      - name: Clone scripts.
        uses: actions/checkout@v2
      - name: Parse commit description
        id: parse
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const path = require('path');
            const currentBuild = "windows";
            const scriptPath = path.resolve('./scripts/option_parser.js');
            require(scriptPath)({github, context, currentBuild});

  build:
    name: Build on latest Windows
    needs: check
    if: needs.check.outputs.build == 'true'
    runs-on: windows-latest
    env:
      SDK: "10.0.18362.0"
      GIT: "https://github.com"
      QT_VER: "5.15.2"
      OPENSSL_VER: "1_1_1"
      ONLY_CACHE: "false"
      MANUAL_CACHING: "0"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"
      REPO_NAME: "kotatogram-desktop"
      REPO_CHECKOUT_NAME: "kotatogram/kotatogram-desktop"
      AUTO_CACHING: "1"

    defaults:
      run:
        shell: cmd
        working-directory: Libraries

    steps:
      - name: Allow long file paths.
        working-directory: ${{ github.workspace }}
        run: git config --system core.longpaths true

      - name: Clone.
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO_CHECKOUT_NAME }}
          submodules: recursive
          path: ${{ env.REPO_NAME }}
          ref: ${{ needs.check.outputs.ref }}

      - name: Clone scripts.
        if: env.ONLY_CACHE == 'false'
        uses: actions/checkout@v2
        with:
          path: buildscripts

      - name: Parse current version.
        shell: bash
        working-directory: ${{ github.workspace }}
        run: ./buildscripts/scripts/parse_version.sh

      - name: Setting up updater keys.
        if: >
          needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        working-directory: ${{ github.workspace }}
        env:
          PACKER_PRIVATE_KEY: ${{ secrets.PACKER_PRIVATE_KEY }}
          PACKER_PRIVATE_BETA_KEY: ${{ secrets.PACKER_PRIVATE_BETA_KEY }}
        run: python buildscripts/scripts/updater_keys.py

      - uses: ilammy/msvc-dev-cmd@v1.9.0
        name: x86 Native Tools Command Prompt.
        with:
          arch: win32

      - name: Set up environment paths.
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          echo "C:\\Strawberry\\perl\\bin\\" >> $GITHUB_PATH
          echo "C:\\Program Files\\NASM\\" >> $GITHUB_PATH
          echo "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\" >> $GITHUB_PATH

          mkdir Libraries && cd Libraries
          echo "Convert unix path to win path."
          p=`pwd | sed 's#^/[d]#d:#g' |sed 's#/#\\\\#g'`
          echo "LibrariesPath=$p" >> $GITHUB_ENV

          echo "QT=${QT_VER//./_}" >> $GITHUB_ENV

      - name: Save msbuild version.
        run: |
          call vcvars32.bat
          msbuild -version > CACHE_KEY.txt

      - name: Generate cache key.
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          curl -o $LibrariesPath/tg_owt-version.json https://api.github.com/repos/desktop-app/tg_owt/git/refs/heads/master
          curl -o $LibrariesPath/tg_angle-version.json https://api.github.com/repos/desktop-app/tg_angle/git/refs/heads/master
          echo $MANUAL_CACHING >> CACHE_KEY.txt
          if [ "$AUTO_CACHING" == "1" ]; then
            thisFile=buildscripts/.github/workflows/win.yml
            echo `md5sum $thisFile | awk '{ print $1 }'` >> CACHE_KEY.txt
          fi
          echo "CACHE_KEY=`md5sum CACHE_KEY.txt | awk '{ print $1 }'`" >> $GITHUB_ENV

      - name: Choco installs.
        run: |
          choco install --allow-empty-checksums --no-progress -y yasm
          choco install --no-progress -y nasm jom ninja
          python -m pip install pywin32

      - name: NuGet sources.
        run: |
          nuget sources Disable -Name "Microsoft Visual Studio Offline Packages"
          nuget sources Add -Source https://api.nuget.org/v3/index.json & exit 0

      - name: Patches.
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          echo "Find necessary commit from doc."
          checkoutCommit=$(grep -A 1 "cd patches" $REPO_NAME/$PREPARE_PATH | sed -n 2p)
          cd $LibrariesPath
          git clone $GIT/desktop-app/patches.git
          cd patches
          eval $checkoutCommit

      - name: Find any version of Python 2.
        shell: bash
        run: |
          echo "Find any version of Python 2."
          p=`ls /c/hostedtoolcache/windows/python | grep "^2" | tail -1`
          if [ -z "$p" ]; then
            echo "Python 2 is not found."
            exit 1
          fi
          echo "PY2=C:\\hostedtoolcache\\windows\\Python\\$p\\x64" >> $GITHUB_ENV
          echo "Found $p."

      - name: LZMA.
        run: |
          git clone %GIT%/telegramdesktop/lzma.git
          cd lzma
          cd C\Util\LzmaLib
          msbuild -m LzmaLib.sln /property:Configuration=Release

      - name: OpenSSL cache.
        id: cache-openssl
        if: ${{ needs.check.outputs.cache }}
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/openssl
          key: ${{ runner.OS }}-${{ env.CACHE_KEY }}-${{ env.OPENSSL_VER }}
      - name: OpenSSL.
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          git clone -b OpenSSL_%OPENSSL_VER%-stable %GIT%/openssl/openssl.git
          cd openssl
          perl Configure no-shared no-tests debug-VC-WIN32
          nmake
          mkdir out.dbg
          move libcrypto.lib out.dbg
          move libssl.lib out.dbg
          move ossl_static.pdb out.dbg\ossl_static
          nmake clean
          move out.dbg\ossl_static out.dbg\ossl_static.pdb
          perl Configure no-shared no-tests VC-WIN32
          nmake
          mkdir out
          move libcrypto.lib out
          move libssl.lib out
          move ossl_static.pdb out

          rmdir /S /Q test
          rmdir /S /Q .git

      - name: Zlib.
        run: |
          git clone %GIT%/telegramdesktop/zlib.git
          cd zlib
          git checkout tdesktop
          cd contrib\vstudio\vc14
          msbuild -m zlibstat.vcxproj /property:Configuration=ReleaseWithoutAsm

      - name: MozJPEG.
        shell: cmd
        run: |
          git clone -b v4.0.1-rc2 %GIT%/mozilla/mozjpeg.git
          cd mozjpeg
          cmake . ^
          -G "Visual Studio 16 2019" ^
          -A Win32 ^
          -DWITH_JPEG8=ON ^
          -DPNG_SUPPORTED=OFF
          cmake --build . --config Release

      - name: OpenAL Soft cache.
        id: cache-openal
        if: ${{ needs.check.outputs.cache }}
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/openal-soft
          key: ${{ runner.OS }}-openal-soft-${{ env.CACHE_KEY }}
      - name: OpenAL Soft.
        if: steps.cache-openal.outputs.cache-hit != 'true'
        run: |
          git clone -b openal-soft-1.21.0 --depth=1 %GIT%/kcat/openal-soft.git
          cd openal-soft\build
          cmake .. ^
          -G "Visual Studio 16 2019" ^
          -A Win32 ^
          -D LIBTYPE:STRING=STATIC ^
          -D FORCE_STATIC_VCRT=ON ^
          -D ALSOFT_BACKEND_DSOUND=OFF

          msbuild -m OpenAL.vcxproj /property:Configuration=RelWithDebInfo

      - name: Opus cache.
        id: cache-opus
        if: ${{ needs.check.outputs.cache }}
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/opus
          key: ${{ runner.OS }}-opus-${{ env.CACHE_KEY }}
      - name: Opus.
        if: steps.cache-opus.outputs.cache-hit != 'true'
        run: |
          git clone -b v1.3.1 %GIT%/xiph/opus.git
          cd opus
          cmake -B out . ^
          -A Win32 ^
          -DCMAKE_INSTALL_PREFIX=%LibrariesPath%/local/opus ^
          -DCMAKE_C_FLAGS_DEBUG="/MTd /Zi /Ob0 /Od /RTC1" ^
          -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG"
          cmake --build out --config Release
          cmake --install out --config Release

      - name: Rnnoise.
        run: |
          git clone %GIT%/desktop-app/rnnoise.git
          mkdir rnnoise\out
          cd rnnoise\out
          cmake -A Win32 ..
          cmake --build . --config Release

      - name: FFmpeg cache.
        id: cache-ffmpeg
        if: ${{ needs.check.outputs.cache }}
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/ffmpeg
          key: ${{ runner.OS }}-ffmpeg-${{ env.CACHE_KEY }}-2-${{ hashFiles('**/build_ffmpeg_win.sh') }}
      - name: FFmpeg.
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          choco install --no-progress -y msys2

          git clone %GIT%/FFmpeg/FFmpeg.git ffmpeg
          cd ffmpeg
          git checkout release/4.4
          set CHERE_INVOKING=enabled_from_arguments
          set MSYS2_PATH_TYPE=inherit
          call c:\tools\msys64\usr\bin\bash --login ../patches/build_ffmpeg_win.sh

          rmdir /S /Q .git

      - name: Angle cache.
        id: cache-angle
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/tg_angle
          key: ${{ runner.OS }}-angle-${{ env.CACHE_KEY }}-${{ hashFiles('**/tg_angle-version.json') }}
      - name: Angle.
        if: steps.cache-angle.outputs.cache-hit != 'true'
        run: |
          git clone --recursive %GIT%/desktop-app/tg_angle.git
          bash -c "sed -i '/\/Zi/d' tg_angle/cmake/init_target.cmake"
          mkdir tg_angle\out\Release
          cd tg_angle\out\Release
          cmake -G Ninja ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DTG_ANGLE_SPECIAL_TARGET=win64 ^
          -DTG_ANGLE_ZLIB_INCLUDE_PATH=%cd%/../../../zlib ../..
          ninja

          :: Cleanup.
          cd %LibrariesPath%\tg_angle
          move out\Release\tg_angle.lib tg_angle.lib
          rmdir /S /Q out
          mkdir out\Release
          move tg_angle.lib out\Release\tg_angle.lib

      - name: Qt 5.15.2 cache.
        id: cache-qt
        if: ${{ needs.check.outputs.cache }}
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/Qt-${{ env.QT_VER }}
          key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}-${{ hashFiles('**/qtbase_5_15_2/*') }}
      - name: Configure Qt 5.15.2.
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          git clone git://code.qt.io/qt/qt5.git qt_%QT%
          cd qt_%QT%
          perl init-repository --module-subset=qtbase,qtimageformats,qtsvg
          git checkout v%QT_VER%
          git submodule update qtbase
          git submodule update qtimageformats
          git submodule update qtsvg
          cd qtbase
          for /r %%i in (..\..\patches\qtbase_%QT%\*) do git apply %%i
          cd ..

          SET SSL=%LibrariesPath%\openssl
          SET SSL_LIBS=libcrypto.lib Ws2_32.lib Gdi32.lib Advapi32.lib Crypt32.lib User32.lib

          SET ANGLE=%LibrariesPath%\tg_angle
          SET ANGLE_LIBS=d3d9.lib dxgi.lib dxguid.lib

          SET ZLIB=%LibrariesPath%\zlib\contrib\vstudio\vc14\x86

          configure ^
          -prefix "%LibrariesPath%\Qt-%QT_VER%" ^
          -release ^
          -opensource ^
          -confirm-license ^
          -static ^
          -static-runtime ^
          -opengl es2 -no-angle ^
          -I "%ANGLE%\include" ^
          -D "GL_APICALL=" ^
          QMAKE_LIBS_OPENGL_ES2_DEBUG="%ANGLE%\out\Debug\tg_angle.lib %ZLIB%\ZlibStatDebug\zlibstat.lib %ANGLE_LIBS%" ^
          QMAKE_LIBS_OPENGL_ES2_RELEASE="%ANGLE%\out\Release\tg_angle.lib %ZLIB%\ZlibStatReleaseWithoutAsm\zlibstat.lib %ANGLE_LIBS%" ^
          -egl ^
          -D "EGLAPI=" ^
          -D "DESKTOP_APP_QT_STATIC_ANGLE=" ^
          QMAKE_LIBS_EGL_DEBUG="%ANGLE%\out\Debug\tg_angle.lib %ZLIB%\ZlibStatDebug\zlibstat.lib %ANGLE_LIBS% Gdi32.lib User32.lib" ^
          QMAKE_LIBS_EGL_RELEASE="%ANGLE%\out\Release\tg_angle.lib %ZLIB%\ZlibStatReleaseWithoutAsm\zlibstat.lib %ANGLE_LIBS% Gdi32.lib User32.lib" ^
          -openssl-linked ^
          -I "%SSL%\include" ^
          OPENSSL_LIBS_DEBUG="%SSL%\out.dbg\libssl.lib %SSL%\out.dbg\%SSL_LIBS%" ^
          OPENSSL_LIBS_RELEASE="%SSL%\out\libssl.lib %SSL%\out\%SSL_LIBS%" ^
          -I "%LibrariesPath%\mozjpeg" ^
          LIBJPEG_LIBS_DEBUG="%LibrariesPath%\mozjpeg\Debug\jpeg-static.lib" ^
          LIBJPEG_LIBS_RELEASE="%LibrariesPath%\mozjpeg\Release\jpeg-static.lib" ^
          -mp ^
          -nomake examples ^
          -nomake tests ^
          -platform win32-msvc

      - name: Qt 5.15.2 build.
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          cd qt_%QT%

          jom -j%NUMBER_OF_PROCESSORS%
          jom -j%NUMBER_OF_PROCESSORS% install

          cd ..
          rmdir /S /Q qt_%QT%

      - name: WebRTC cache.
        id: cache-webrtc
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/tg_owt
          key: ${{ runner.OS }}-webrtc-${{ env.CACHE_KEY }}-${{ hashFiles('**/tg_owt-version.json') }}
      - name: WebRTC.
        if: steps.cache-webrtc.outputs.cache-hit != 'true'
        run: |
          git clone --recursive %GIT%/desktop-app/tg_owt.git
          bash -c "sed -i '/\/Zi/d' tg_owt/cmake/init_target.cmake"
          mkdir tg_owt\out\Release
          cd tg_owt\out\Release
          cmake -G Ninja ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DTG_OWT_SPECIAL_TARGET=win ^
          -DTG_OWT_BUILD_AUDIO_BACKENDS=OFF ^
          -DTG_OWT_LIBJPEG_INCLUDE_PATH=%cd%/../../../mozjpeg ^
          -DTG_OWT_OPENSSL_INCLUDE_PATH=%cd%/../../../openssl/include ^
          -DTG_OWT_OPUS_INCLUDE_PATH=%cd%/../../../opus/include ^
          -DTG_OWT_FFMPEG_INCLUDE_PATH=%cd%/../../../ffmpeg ^
          ../..

          ninja

          :: Cleanup.
          cd %LibrariesPath%\tg_owt
          move out\Release\tg_owt.lib tg_owt.lib
          rmdir /S /Q out
          mkdir out\Release
          move tg_owt.lib out\Release\tg_owt.lib

      - name: Kotatogram Desktop build.
        if: env.ONLY_CACHE == 'false'
        working-directory: ${{ github.workspace }}
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
        run: |
          cd %REPO_NAME%
          call vcvarsall.bat x86 %SDK%

          set UPDDEFINE="OFF"
          if NOT "${{ needs.check.outputs.update }}" == "true" set UPDDEFINE="ON"

          set PACKERDEFINE="ON"
          if NOT "${{ needs.check.outputs.packer }}" == "true" set PACKERDEFINE="OFF"

          bash -c "sed -i 's/\/Zi/$<IF:$<BOOL:${DESKTOP_APP_NO_PDB}>,,\/Zi>/' cmake/options_win.cmake"

          cmake -B build . ^
          -GNinja ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_C_COMPILER=cl ^
          -DCMAKE_CXX_COMPILER=cl ^
          -DTDESKTOP_API_ID=%API_ID% ^
          -DTDESKTOP_API_HASH=%API_HASH% ^
          -DDESKTOP_APP_USE_PACKAGED=OFF ^
          -DDESKTOP_APP_DISABLE_AUTOUPDATE=%UPDDEFINE% ^
          -DKTGDESKTOP_ENABLE_PACKER=%PACKERDEFINE% ^
          -DDESKTOP_APP_NO_PDB=ON ^
          -DCMAKE_SYSTEM_VERSION=%SDK% ^
          -DCMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION=%SDK%

          cmake --build build

      - name: Move artifact.
        if: env.ONLY_CACHE == 'false'
        working-directory: ${{ github.workspace }}
        shell: bash
        env:
          tag_name: ${{ needs.check.outputs.display_version }}
        run: |
          cd $REPO_NAME

          artifact_name=${{ env.VERSION_STR }}.zip
          echo "ARTIFACT_NAME=$artifact_name" >> $GITHUB_ENV

          mkdir -p artifact/Kotatogram
          mv build/Kotatogram.exe artifact/Kotatogram
          ${{ needs.check.outputs.update }} && mv build/Updater.exe artifact/Kotatogram

          cd artifact
          7z a $artifact_name Kotatogram

      - name: Upload artifact.
        uses: actions/upload-artifact@v2
        if: env.ONLY_CACHE == 'false'
        with:
          path: ./${{ env.REPO_NAME }}/artifact/Kotatogram
          name: Binary
      
      - name: Install dependencies for Telegram uploader.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
        working-directory: ${{ github.workspace }}
        run: pip install telethon cryptg

      - name: Upload binary to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
        working-directory: ${{ github.workspace }}
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python buildscripts/scripts/uploader.py
          "@ktgbuilds"
          "${{ env.REPO_NAME }}/artifact/${{ env.ARTIFACT_NAME }}"
          "${{ needs.check.outputs.description }}"

      - name: Make installer.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.installer == 'true'
          && needs.check.outputs.update == 'true'
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: >
          iscc
          /DReleasePath=%cd%\${{ env.REPO_NAME }}\artifact\Kotatogram
          /DMyAppVersion=${{ env.VERSION_STR }}
          /DMyAppVersionFull=${{ env.VERSION_STR_FULL }}
          "%cd%\${{ env.REPO_NAME }}\Telegram\build\setup.iss"

      - name: Upload installer artifact.
        uses: actions/upload-artifact@v2
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.installer == 'true'
        with:
          path: ./${{ env.REPO_NAME }}/artifact/Kotatogram/ksetup.${{ env.VERSION_STR_FULL }}.exe
          name: Installer

      - name: Upload installer to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
          && needs.check.outputs.installer == 'true'
          && needs.check.outputs.update == 'true'
        working-directory: ${{ github.workspace }}
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python buildscripts/scripts/uploader.py
          "@ktgbuilds"
          "${{ env.REPO_NAME }}/artifact/Kotatogram/ksetup.${{ env.VERSION_STR_FULL }}.exe"
          "${{ needs.check.outputs.description }}"

      - name: Package update.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          cd $REPO_NAME

          ./build/bin/Packer.exe -version ${{ env.VERSION_NUM }}${{ env.PACKER_BETA }} \
          -path artifact/Kotatogram/Kotatogram.exe \
          -path artifact/Kotatogram/Updater.exe
          
          tar -caf tupdate${{ env.VERSION_NUM }}.tar.xz tupdate${{ env.VERSION_NUM }}

      - name: Upload update artifact.
        uses: actions/upload-artifact@v2
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        with:
          path: ./${{ env.REPO_NAME }}/tupdate${{ env.VERSION_NUM }}
          name: Update file

      - name: Upload update to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
          && needs.check.outputs.telegram == 'true'
        working-directory: ${{ github.workspace }}
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python buildscripts/scripts/uploader.py
          "@ktghbcfiles"
          "${{ env.REPO_NAME }}/tupdate${{ env.VERSION_NUM }}"
          "${{ needs.check.outputs.description }}"
